import { Component, ViewChild, ElementRef } from '@angular/core';
import { IonicPage, NavController, NavParams, PopoverController, LoadingController, AlertController } from 'ionic-angular';
import { EstacionesListPage } from '../estaciones-list/estaciones-list';
import { CombustibleModel } from '../../models/CombustibleModel';
import { RestServiceProvider } from '../../providers/rest-service';
import { AlertaServiceProvider } from '../../providers/alerta-service';
import { Plugins } from '@capacitor/core';

import { Geolocation } from '@ionic-native/geolocation';
import leaflet from 'leaflet';
import leafletKnn from 'leaflet-knn';
import { HttpParams } from '@angular/common/http';

@IonicPage()
@Component({
  selector: 'page-estaciones',
  templateUrl: 'estaciones.html',
})
export class EstacionesPage {
  public estaciones: CombustibleModel[] = [];
  public rango: number = 2;
  public progresoKm: number = 5;
  public latOrigen: number = 0;
  public longOrigen: number = 0;
  @ViewChild('map') mapContainer: ElementRef;
  map: any;

  constructor(public navCtrl: NavController, public navParams: NavParams, public popoverCtrl: PopoverController,
    public loadingCtrl: LoadingController, public alertCtrl: AlertController,
    public restService: RestServiceProvider, public alertaService: AlertaServiceProvider, private geolocation: Geolocation) {
      /*this.estaciones.push(new CombustibleModel("Ixtaczoquitlan", 88.88, 88.88, 88.88, false));
      this.estaciones.push(new CombustibleModel("Jalapa", 88.88, 88.88, 88.88, false));
      this.estaciones.push(new CombustibleModel("C칩rdoba", 88.88, 88.88, 88.88, false));*/
      this.cargarEstaciones();
  }

  cargarEstaciones() {
    //api/station
    let loading = this.loadingCtrl.create();
    loading.present();
    this.estaciones = [];
    this.restService.getToken().timeout(this.restService.timeOver).subscribe(data => {
      if (data == null) {
        loading.dismiss();
        this.alertaService.warnAlert(this.restService.headerValidacion, this.restService.mensajeValidacionAdmin, null);
      } else {
        let body = new HttpParams();
        this.restService.restServiceGETToken("station", body, data.toString()).timeout(this.restService.timeOver).subscribe(
          dataRegistro => {
            if (Object.keys(dataRegistro['Response']).length != 0) {
              let arrayEstaciones = dataRegistro['Response'];
              var i = 0;
              for (let index = 0; index < arrayEstaciones.length; index++) {
                let estacion = arrayEstaciones[index];
                if (index == 0) {
                  i = estacion.Id;
                }
                this.estaciones.push(new CombustibleModel(estacion.Nombre, 0, 0, 0, false, estacion.Id, estacion.Direccion,estacion.Geolat,estacion.Geolng));
                //loading.dismiss();
						this.cargarPrecio(this.estaciones, estacion.Id, data.toString(), index);
              }
              //this.cargarPrecio(this.estaciones, i, data.toString());
              this.geolocalizar();
              loading.dismiss();
              //this.combustibles.push(new CombustibleModel("Ixtaczoquitlan", 88.88, 88.88, 88.88, true));
            } else {
              this.alertaService.warnAlert(this.restService.headerValidacion, "No se encontraron estaciones", null);
            }
          }, error => {
            loading.dismiss();
            console.log(error);
            this.alertaService.errorAlert(this.restService.headerError, this.restService.mensajeError, null);
          }
        );
      }
    }, error => {
      loading.dismiss();
      console.log(error);
      this.alertaService.errorAlert(this.restService.headerError, this.restService.mensajeError, null);
    });
  }

  cargarPrecio(combustibles: CombustibleModel[], Id: any, token, indexCom: any) {
    for (let index = 0; index < 1; index++) {
      const estacion = combustibles[0];
      var armaUrl = "gasoline/price/" + Id;
      this.restService.restServiceGETToken(armaUrl, new HttpParams(), token).timeout(this.restService.timeOver).subscribe(
        dataEstacionPrecio => {
          if (Object.keys(dataEstacionPrecio['Response']).length != 0) {
            let arrayPrecios = dataEstacionPrecio['Response'];
            combustibles[indexCom] = new CombustibleModel(combustibles[indexCom].nombre, arrayPrecios[0].Price, arrayPrecios[1].Price, arrayPrecios[2].Price, true, combustibles[indexCom].id,combustibles[indexCom].direccion,combustibles[indexCom].lat,combustibles[indexCom].long);
          } else {
            combustibles[indexCom] = new CombustibleModel(combustibles[indexCom].nombre, 0, 0, 0, false);
          }
        }, error => {
          combustibles[indexCom] = new CombustibleModel(combustibles[indexCom].nombre, 0, 0, 0, false);
          console.log(error);
          this.alertaService.errorAlert(this.restService.headerError, this.restService.mensajeError, null);
        }
      );
    }
  }

  recargar(){
    this.geolocalizar();
  }

  changeValue(c: CombustibleModel) {
    if (!c.expandible) {
      let loading = this.loadingCtrl.create();
      loading.present();
      this.restService.getToken().timeout(this.restService.timeOver).subscribe(data => {
        if (data == null) {
          loading.dismiss();
          this.alertaService.warnAlert(this.restService.headerValidacion, this.restService.mensajeValidacionAdmin, null);
        } else {
          let body = new HttpParams();
          var armaUrl = "gasoline/price/" + c.id;
          this.restService.restServiceGETToken(armaUrl, new HttpParams(), data.toString()).timeout(this.restService.timeOver).subscribe(
            dataEstacionPrecio => {
              if (Object.keys(dataEstacionPrecio['Response']).length != 0) {
                let arrayPrecios = dataEstacionPrecio['Response'];
                c.precioMagna = arrayPrecios[0].Price;
                c.precioPremium = arrayPrecios[1].Price;
                c.precioDiesel = arrayPrecios[2].Price;
                c.expandible = true;
              } else {
                this.alertaService.errorAlert(this.restService.headerValidacion, "La estaci칩n no cuenta con precios", null);
              }
              loading.dismiss();
            }, error => {
              console.log(error);
              this.alertaService.errorAlert(this.restService.headerError, this.restService.mensajeError, null);
            }
          );
        }
      }, error => {
        loading.dismiss();
        console.log(error);
        this.alertaService.errorAlert(this.restService.headerError, this.restService.mensajeError, null);
      });
    } else {
      c.expandible = !c.expandible;
    }
  }

  geolocalizar() {
    let loading = this.loadingCtrl.create();
    loading.present();
    this.alertaService.errorAlert("Error 1", "Esta entrando a geolocalizar", null);
    let options = {timeout: 35000, enableHighAccuracy: true, maximumAge: 3600};
    this.geolocation.getCurrentPosition()
      .then((resp) => {
		  this.alertaService.errorAlert("Error 1", "Si obtuvo las coordenadas y son:" + resp.coords, null);
        console.log("Se obtienen coordenadas");
        //resp.coords.latitude;
        //resp.coords.longitude;
        
        this.latOrigen = resp.coords.latitude;
  		  this.longOrigen = resp.coords.longitude;

        //////////////
		  this.alertaService.errorAlert("Error 1", "Antes de obtener el mapa", null);
        this.map = leaflet.map('map').setView([resp.coords.latitude, resp.coords.longitude], 15);
        var geo = [];
        this.estaciones.forEach(estacion => {
          geo.push({
            "type": "Feature",
          "geometry": {
            "type": "Point",
            "coordinates": [estacion.lat, estacion.long]
          },
          "properties": {
            "name": "Coordenada prueba",
            "precioMagna": estacion.precioMagna,
            "precioPremium": estacion.precioPremium,
            "precioDiesel": estacion.precioDiesel
          }
          });
        });
        var gj = leaflet.geoJson(geo);
        var nearest = leafletKnn(gj).nearest([resp.coords.latitude, resp.coords.longitude], 10, this.progresoKm*1000);//punto de partida, estaciones m치ximas a encontrar, di치metro de busqueda en metros
        console.log(nearest);//Este objeto contiene todos los lugares cercanos al punto de partida
        // set map tiles source
        leaflet.tileLayer('https://tile.openstreetmap.org/{z}/{x}/{y}.png', {
          attribution: 'Mapa de Estaciones &copy; K Energy',
          maxZoom: 20,
        }).addTo(this.map);

        this.map.locate({
          setView: true,
          maxZoom: 14-parseInt(""+(this.progresoKm/8))
        }).on('locationfound', (e) => {
        	loading.dismiss();
			this.alertaService.errorAlert("Error 1", "Encontro la locacion", null);
          // add marker to the map
          let marker = leaflet.marker([resp.coords.latitude, resp.coords.longitude]).addTo(this.map);

          var greenIcon = leaflet.icon({
            iconUrl: 'assets/css/images/marker-icon.png',
            iconSize: [27, 41], // size of the icon
            shadowSize: [50, 64], // size of the shadow
            iconAnchor: [13, 44], // point of the icon which will correspond to marker's location
            shadowAnchor: [4, 62],  // the same for the shadow
            popupAnchor: [-3, -76] // point from which the popup should open relative to the iconAnchor
          });

          nearest.forEach(cercano => {
            var caracteristicas = cercano.layer.feature.properties;
            let marker = leaflet.marker([cercano.lon, cercano.lat], { icon: greenIcon, }).addTo(this.map);


            var infoWindowContent = '<div id="content" style="width: 165px;">';
            infoWindowContent += '<div><center><img src="/assets/imgs/estaciones/gasolina.jpg" alt="logo" style="width: 101%;box-shadow: 1px 1px 16px 1px #717171;"/></center></div>';
            infoWindowContent += '<center><strong><h1 id="firstHeading" class="firstHeading" style="font-size: 100%;font-weight: 900;margin-top: 6px;">';
            infoWindowContent += caracteristicas.name + '</h1></strong>';
            infoWindowContent += '<div style="width:100%;margin: -16px;"><p style="color:#009263;margin: 0px;width:60%;display:inline-block;text-align:rigth"><strong>Precio Magna: </strong></p><p style="width: 38%;display: inline-block;text-align: center;color: #000;">' + caracteristicas.precioMagna + '</p></div>';
            infoWindowContent += '<div style="width:100%;margin: -16px;"><p style="color:#d52f35;margin: 0px;width:60%;display:inline-block;text-align:rigth"><strong>Precio Premium: </strong></p><p style="width: 38%;display: inline-block;text-align: center;color: #000;">' + caracteristicas.precioPremium + '</p></div>';
            infoWindowContent += '<div style="width:100%;margin: -16px;"><p style="color:#000;margin: 0px;width:60%;display:inline-block;text-align:rigth"><strong>Precio Diesel: </strong></p><p style="width: 38%;display: inline-block;text-align: center;color: #000;">' + caracteristicas.precioDiesel + '</p></div>';
            marker.bindPopup(infoWindowContent);
          });
        }).on('locationerror', (err) => {
        	loading.dismiss();
			 this.alertaService.errorAlert("Error 1", "No encontro ni nada", null);
          //this.alertaService.errorAlert(this.restService.headerError, "Habilita los permisos de geolocalizaci칩n en ajustes", null);
          const alert = this.alertCtrl.create({
          title: this.restService.headerError,
          message: "No hemos podido obtener su ubicaci칩n, puede ser por permisos gps.",
          cssClass: 'alertCustomCss2',
          buttons: [
            {
              text: 'Aceptar',
              handler: () => {

              }
            },
            {
              text: 'Reintentar',
              handler: () => {
                this.geolocalizar();
              }
            }
          ]
        });
        alert.present();
        })
        ///////////////
      })
      .catch((error) => {
		  this.alertaService.errorAlert("Error 1", "Error en la geolocalizacion: " + error.code + " = " + error.message, null);
        console.log('Error getting location', error);
        console.log(error);
        loading.dismiss();

        const alert = this.alertCtrl.create({
          title: this.restService.headerError,
          message: "Favor de revisar su conexi칩n a internet y/o permisos de gps",
          cssClass: 'alertCustomCss2',
          buttons: [
            {
              text: 'Regresar',
              handler: () => {
                this.navCtrl.pop();
              }
            },
            {
              text: 'Reintentar',
              handler: () => {
                this.geolocalizar();
              }
            }
          ]
        });
        alert.present();
      });
  }

  presentPopover(myEvent) {
    let popover = this.popoverCtrl.create(EstacionesListPage,{estaciones:this.estaciones, map:this.map, latOrigen:this.latOrigen, longOrigen:this.longOrigen});
    popover.present({
      ev: myEvent
    });
  }
  
  

  change(){
    console.log("cambia rango");
  }
  
  selectRangeVal() {
  		console.log("cambia rango en kilometraje " + this.progresoKm);
		this.map.remove();
  		this.geolocalizar();
  }
  
  
}
