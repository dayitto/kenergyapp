import { Component } from '@angular/core';
import { IonicPage, NavController, NavParams, LoadingController } from 'ionic-angular';
import { VehiculoModel } from '../../models/vehiculoModel';
import { CombustibleModel } from '../../models/CombustibleModel';
import { FacturaModel } from '../../models/facturaModel';
import { ProductoModel } from '../../models/productoModel';
import { RestServiceProvider } from '../../providers/rest-service';
import { AlertaServiceProvider } from '../../providers/alerta-service';
import { Storage } from '@ionic/storage';
import { HttpParams } from '@angular/common/http';

@IonicPage()
@Component({
  selector: 'page-facturacion',
  templateUrl: 'facturacion.html',
})
export class FacturacionPage {
  public desde: Date = new Date();
  public hasta: Date = new Date();
  public vehiculos: ProductoModel[] = [];
  public idVehiculo: number = 0;
  public estaciones: ProductoModel[] = [];
  public idEstacion: number = 0;
  public facturas: any[] = [];
  

  public usuario: any = null;
  constructor(public navCtrl: NavController, public navParams: NavParams,
    public localStorage: Storage,
    public alertaService: AlertaServiceProvider, public restService: RestServiceProvider,
    public loadingCtrl: LoadingController) {
    this.hasta.setDate(this.desde.getDate() + 1);
    this.openSesion();
  }

  openSesion() {
    this.localStorage.ready().then(() => {
      this.localStorage.get(`@userSession`).then((data) => {
        if (data != null) {
          this.usuario = data;
          this.cargarCombos();
        } else {
          this.alertaService.warnAlert(this.restService.headerValidacion, "Usuario sin sesión, no se cargarán sus datos", null);
        }
      });
    });

  }

  cargarCombos() {
    let loading = this.loadingCtrl.create();
    loading.present();
    this.vehiculos = [];
    this.vehiculos.push(new ProductoModel(0, "Vehículo"));
    this.estaciones = [];
    this.estaciones.push(new ProductoModel(0, "Estación"));
    this.restService.getToken().timeout(this.restService.timeOver).subscribe(data => {
      if (data == null) {
        loading.dismiss();
        this.alertaService.warnAlert(this.restService.headerValidacion, this.restService.mensajeValidacionAdmin, null);
      } else {
        let body = new HttpParams();
        var a = this.usuario.Id;
        //var a = 44;
        //body.append("IdClient", a.toString());
        var urlArmada = "stats/regular/" + a;
        //var urlArmada = "stats/"+this.usuario.IdClient;
        this.restService.restServiceGETToken(urlArmada, body, data.toString()).timeout(this.restService.timeOver).subscribe(
          dataRegistro => {
            if (Object.keys(dataRegistro['Response']).length != 0) {

              let estaciones = dataRegistro['Response'].Estacion;
              estaciones.forEach(estacion => {
                this.estaciones.push(new ProductoModel(estacion.Id, estacion.Nombre));
              });

              let vehiculos = dataRegistro['Response'].Vehiculo;
              vehiculos.forEach(vehiculo => {
                this.vehiculos.push(new ProductoModel(vehiculo.Id, vehiculo.Nombre));
              });
              //this.buscar();
            } else {
              this.alertaService.warnAlert(this.restService.headerValidacion, "No se cargaron los filtros de búsqueda", null);
            }
            loading.dismiss();
          }, error => {
            loading.dismiss();
            console.log(error);
            this.alertaService.errorAlert(this.restService.headerError, this.restService.mensajeError, null);
          }
        );
      }
    }, error => {
      loading.dismiss();
      console.log(error);
      this.alertaService.errorAlert(this.restService.headerError, this.restService.mensajeError, null);
    });
  }

  ionViewDidLoad() {
    console.log('ionViewDidLoad FacturacionPage');
  }

  buscar() {
    if (this.usuario == null) {
      this.alertaService.warnAlert(this.restService.headerValidacion, "Usuario no en sesión", null);
    } else {
      this.facturas = [];
      var fechaDesde = this.desde.toString().split("-");
      var fechaFormat = "";
      var fechaHasta = this.hasta.toString().split("-");
      var fechaFormatHasta = "";
      if (fechaDesde.length < 3) {
        //this.alertaService.warnAlert(this.restService.headerValidacion, "Selecciona una fecha de inicio", null);
      } else {
        // año/ mes/ dia
        fechaFormat = fechaDesde[2] + "/" + fechaDesde[1] + "/" + fechaDesde[0];
      }
      if (fechaHasta.length < 3) {
        //this.alertaService.warnAlert(this.restService.headerValidacion, "Selecciona una fecha de fin", null);
      } else {
        // año/ mes/ dia
        fechaFormatHasta = fechaHasta[2] + "/" + fechaHasta[1] + "/" + fechaHasta[0];
      }
      if(this.idEstacion == 0){
        //this.alertaService.warnAlert(this.restService.headerValidacion, "Selecciona una Estación", null);
      }
      
      let loading = this.loadingCtrl.create();
      loading.present();

      this.restService.getToken().timeout(this.restService.timeOver).subscribe(data => {
        if (data == null) {
          loading.dismiss();
          this.alertaService.warnAlert(this.restService.headerValidacion, this.restService.mensajeValidacionAdmin, null);
        } else {
          let body = new HttpParams();

          var a = this.usuario.Id;
          var url = "invoice/regular?"+"IdUser="+a+"&Desde=" + fechaFormat+"&Hasta="+fechaFormatHasta+"&IdEstacion="+this.idEstacion;
          
          if (this.idVehiculo != 0) {
            url += "&IdVehiculo=" + this.idVehiculo;
          }
          //var urlArmada = "stats/"+this.usuario.IdClient;
          this.restService.restServiceGETToken(url, body, data.toString()).timeout(this.restService.timeOver).subscribe(
            dataRegistro => {
              if (Object.keys(dataRegistro['Response']).length != 0) {
                let facturas = dataRegistro['Response'];
                facturas.forEach(carga => {
                  this.facturas.push({
                    fecha:carga.Fecha,
                    precio:carga.Efectivo,
                    id:carga.Id,
                    auto: carga.Auto,
                    idEstacion: this.idEstacion});
                });
              } else if(dataRegistro['Message']!=3){
                this.alertaService.warnAlert(this.restService.headerValidacion, dataRegistro['Message'], null);
              }else{
                this.alertaService.warnAlert(this.restService.headerValidacion, "No se encontraron registros de facturación", null);
              }
              loading.dismiss();
            }, error => {
              loading.dismiss();
              console.log(error);
              this.alertaService.errorAlert(this.restService.headerError, this.restService.mensajeError, null);
            }
          );
        }
      }, error => {
        loading.dismiss();
        console.log(error);
        this.alertaService.errorAlert(this.restService.headerError, this.restService.mensajeError, null);
      });
    }
  }

  sendCorreo(factura:any){
    if (this.usuario == null) {
      this.alertaService.warnAlert(this.restService.headerValidacion, "Usuario no en sesión", null);
    } else {
      let loading = this.loadingCtrl.create();
      loading.present();

      this.restService.getToken().timeout(this.restService.timeOver).subscribe(data => {
        if (data == null) {
          loading.dismiss();
          this.alertaService.warnAlert(this.restService.headerValidacion, this.restService.mensajeValidacionAdmin, null);
        } else {
          let body = new HttpParams();

          var a = this.usuario.Id;
          var url = "invoice/email?"+"IdFactura="+factura.id+"&IdEstacion =" + this.idEstacion;
          //var urlArmada = "stats/"+this.usuario.IdClient;
          this.restService.restServiceGETToken(url, body, data.toString()).timeout(this.restService.timeOver).subscribe(
            dataRegistro => {
              if (dataRegistro['Response']) {
                this.alertaService.alertaBasica("Bien!","Tu factura ha sido enviada a tu correo, favor de revisarlo",null);
              } else if(dataRegistro['Message']!=3){
                this.alertaService.warnAlert(this.restService.headerValidacion, dataRegistro['Message'], null);
              }else{
                this.alertaService.warnAlert(this.restService.headerValidacion, "No se encontraron registros de facturación", null);
              }
              loading.dismiss();
            }, error => {
              loading.dismiss();
              console.log(error);
              this.alertaService.errorAlert(this.restService.headerError, this.restService.mensajeError, null);
            }
          );
        }
      }, error => {
        loading.dismiss();
        console.log(error);
        this.alertaService.errorAlert(this.restService.headerError, this.restService.mensajeError, null);
      });
    }
  }

  sendPdf(factura:any){
    if (this.usuario == null) {
      this.alertaService.warnAlert(this.restService.headerValidacion, "Usuario no en sesión", null);
    } else {
      let loading = this.loadingCtrl.create();
      loading.present();

      this.restService.getToken().timeout(this.restService.timeOver).subscribe(data => {
        if (data == null) {
          loading.dismiss();
          this.alertaService.warnAlert(this.restService.headerValidacion, this.restService.mensajeValidacionAdmin, null);
        } else {
          let body = new HttpParams();

          var a = this.usuario.Id;
          var url = "invoice/pdf?"+"IdFactura="+factura.id+"&IdEstacion =" + this.idEstacion;
          //var urlArmada = "stats/"+this.usuario.IdClient;
          this.restService.restServiceGETToken(url, body, data.toString()).timeout(this.restService.timeOver).subscribe(
            dataRegistro => {
              
              if (dataRegistro['Response'].length != 0) {
                //Agregar la lógica para visualizar pdf ya que aqui se recibe el url
              } else if(dataRegistro['Message']!=3){
                this.alertaService.warnAlert(this.restService.headerValidacion, dataRegistro['Message'], null);
              }else{
                this.alertaService.warnAlert(this.restService.headerValidacion, "No se encontraron registros de facturación", null);
              }
              loading.dismiss();
            }, error => {
              loading.dismiss();
              console.log(error);
              this.alertaService.errorAlert(this.restService.headerError, this.restService.mensajeError, null);
            }
          );
        }
      }, error => {
        loading.dismiss();
        console.log(error);
        this.alertaService.errorAlert(this.restService.headerError, this.restService.mensajeError, null);
      });
    }
  }
}
